using System;
using System.Collections.Generic;
using System.Linq;
using CSharpFunctionalExtensions;
using NUnit.Framework;

namespace Tests
{
    public class Tests
    {
        internal class SingleColorPixel
        {
            public bool PixelOn { get; set; }

            public int Count { get; set; }
        }

        private const string BitmapContaining2X2Square = "0111001001100110";

        private const string BitmapContaining3X3Square = "0111111111111111";

        private const string BitmapContaining26X26Square =


        [TestCase(BitmapContaining2X2Square, 4, ExpectedResult = 4, TestName = "{m} a bitmap containing a 2x2 square")]
        [TestCase(BitmapContaining3X3Square, 4, ExpectedResult = 9, TestName = "{m} a bitmap containing a 3x3 square")]
        [TestCase(BitmapContaining26X26Square, 102, ExpectedResult = 676, TestName = "{m} a bitmap containing a 26x26 square")]
        public int ReturnsExpectedResultFor(string testBitmap, int width)
        {
            return FindLargestSquareAreaFunctional(testBitmap, width);
        }

        private static int FindLargestSquareArea(string testBitmap, int width)
        {
            var bitmap = ConvertToArray(testBitmap);

            var cacheMap = ConvertToArray(testBitmap);

            var rows = testBitmap.Length / width;

            var result = 0;

            for (var row = 0; row < rows; row++)
            {
                for (var col = 0; col < width; col++)
                {
                    if (row == 0 || col == 0) continue;

                    var examinedPixelIndex = row * width + col;

                    if (bitmap[examinedPixelIndex] == 0) continue;

                    var adjacentValue = GetAdjacentCacheMapValue(cacheMap, row, col, width);

                    cacheMap[examinedPixelIndex] = 1 + adjacentValue;

                    result = Math.Max(result, cacheMap[examinedPixelIndex]);
                }
            }

            return result * result;
        }

        private static int FindLargestSquareAreaAlt(string testBitmap, int width)
        {
            var bitmapPixels = ConvertFrom(testBitmap).ToList();

            var result = 0;

            foreach (var pixel in bitmapPixels.Where(p => p.PixelOn))
            {
                var index = bitmapPixels.IndexOf(pixel);

                var row = index / width;

                if(row == 0) continue;

                var col = index - (row * width);

                if(col == 0) continue;

                var adjacentValue = GetAdjacentCacheMapValue(bitmapPixels, row, col, width);

                pixel.Count = 1 + adjacentValue;

                result = Math.Max(result, pixel.Count);
            }

            return result * result;
        }

        private static int FindLargestSquareAreaFunctional(string testBitmap, int width)
        {
            var bitmapPixels = ConvertFrom(testBitmap).ToList();

            var result = 0;

            foreach (var pixel in bitmapPixels.Where(pixel => pixel.PixelOn))
            {
                GetIndex(bitmapPixels, pixel)
                    .OnSuccess(index => GetRow(index, width)
                    .Ensure(row => row !=0, "Adjacent out of bounds")
                    .OnSuccess(row => GetCol(index, width, row)
                    .Ensure(col => col != 0, "Adjacent out of bounds")
                    .OnSuccess(col => result = ProcessAdjacent(bitmapPixels, pixel, width, row, col, result))));
            }

            return result * result;
        }

        private static Result<int> GetIndex(IList<SingleColorPixel> bitmap, SingleColorPixel pixel)
        {
            return Result.Ok(bitmap.IndexOf(pixel));
        }

        private static Result<int> GetRow(int index, int width)
        {
            return Result.Ok(index / width);
        }

        private static Result<int> GetCol(int index, int width, int row)
        {
            return Result.Ok(index - (row * width));
        }

        private static int ProcessAdjacent(
            IReadOnlyList<SingleColorPixel> bitmap, 
            SingleColorPixel pixel, 
            int width, 
            int row, 
            int col,
            int currentMax)
        {
            var adjacentValue = GetAdjacentCacheMapValue(bitmap, row, col, width);

            pixel.Count = 1 + adjacentValue;

            return Math.Max(currentMax, pixel.Count);
        }

        private static int[] ConvertToArray(string testBitmap)
        {
            return testBitmap.Select(s => s - 48).ToArray();
        }

        private static IEnumerable<SingleColorPixel> ConvertFrom(string testBitmap)
        {
            return testBitmap.Select(
                s => new SingleColorPixel()
                {
                    PixelOn = s == '1',
                    Count = s - 48
                });
        }

        private static int GetAdjacentCacheMapValue(IReadOnlyList<int> cacheMap, int row, int col, int width)
        {
            return Math.Min(
                Math.Min(
                cacheMap[(row - 1) * width + col],
                cacheMap[row * width + (col - 1)]),
                cacheMap[(row - 1) * width + (col - 1)]);
        }

        private static int GetAdjacentCacheMapValue(IReadOnlyList<SingleColorPixel> cacheMap, int row, int col, int width)
        {
            return Math.Min(
                Math.Min(
                    cacheMap[(row - 1) * width + col].Count,
                    cacheMap[row * width + (col - 1)].Count),
                cacheMap[(row - 1) * width + (col - 1)].Count);
        }
    }
}